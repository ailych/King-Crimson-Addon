import { world as w } from "mojang-minecraft"; function rc(c) { for (const p of w.getPlayers()) { try { return { r: false, result: p.runCommand(c) }; } catch (e) { return { r: true, result: JSON.parse(e) }; } } } w.events.tick.subscribe(() => { let a = [ "hotbar_slot", "stand_user", "kc_scd", "kc_atk", "kc_chop", "kc_donut", "kc_atkcd", "kc_chopcd", "kc_donutcd", "kc_ts", "kc_tsa", "kc_tscd", ]; let o = Array.from(a); for (const a of o) { rc(`scoreboard objectives add ${a} dummy`); rc(`scoreboard players add ${a} 0`); } }); w.events.tick.subscribe(() => { for (const p of w.getPlayers()) { let s = p.selectedSlot; p.runCommand(`scoreboard players set @s hotbar_slot ${s + 1}`); } }); class sd { ase(s, n, sc, v) { rc(`scoreboard players ${s} @a[name="${n}"] ${sc} ${v}`); } gse(n, s) { const r = rc(`scoreboard players test @a[name="${n}"] ${s} * *`); if (r.r) return 0; return parseInt(r.result.statusMessage.match(/\d+/)); } } function std(o, v) { for (const p of w.getPlayers()) { rc( `execute @a[tag=kcuser,name="${p.name}",scores={${o}=12}] ~~~ execute @e[type=jjc:kc,name="kc ${p.name}"] ~~~ damage @e[r=1.3,type=!jjc:kc,name=!"${p.name}"] ${v}` ); } } function sts(t, o, v) { for (const p of w.getPlayers()) { rc(`scoreboard players ${t} @e[type=jjc:kc,name="kc ${p.name}"] ${o} ${v}`); } } function fl() { w.events.tick.subscribe(() => { for (const p of w.getPlayers()) { let vy = p.viewVector.y; if (p.hasTag("stand_on") && p.hasTag("kcuser") && !p.hasTag("skill")) { rc(`effect "${p.name}" weakness 1 255 true`); rc( `execute "${p.name}" ~~~ tp @e[type=jjc:kc,name="kc ${ p.name }"] ^0.5^${0.3 + vy}^-0.5 facing ^^^-10` ); } else if ( p.hasTag("stand_on") && p.hasTag("kcuser") && p.hasTag("skill") ) { rc( `execute "${p.name}" ~~~ tp @e[type=jjc:kc,name="kc ${p.name}"] ^^${ 0.3 + vy }^1.3 facing ^^^10` ); } } }); w.events.playerLeave.subscribe((evd) => { let player_name = evd.playerName; rc(`event entity @e[type=jjc:kc,name="kc ${player_name}"] jjc:despawn`); }); w.events.playerJoin.subscribe((evd) => { let p = evd.player; if (p.hasTag("stand_on") && p.hasTag("kcuser")) { rc(`summon jjc:kc "kc ${p.name}"`); } }); } const sc = new sd(); function ab() { w.events.tick.subscribe(() => { for (const p of w.getPlayers()) { if (p.hasTag("kcuser")) { var s = sc.gse(p.name, "hotbar_slot"); let ac = sc.gse(p.name, "kc_atkcd"); let acd = ac / 20; let cd = sc.gse(p.name, "kc_chopcd"); let cdd = cd / 20; let dc = sc.gse(p.name, "kc_donutcd"); let dcd = dc / 20; let td = sc.gse(p.name, "kc_tscd"); let tdd = td / 20; let kd = sc.gse(p.name, "kc_scd"); let kdd = kd / 20; let ae = sc.gse(p.name, "kc_tsa"); if (ac > 0) { sc.ase("remove", p.name, "kc_atkcd", 1); } if (cd > 0) { sc.ase("remove", p.name, "kc_chopcd", 1); } if (dc > 0) { sc.ase("remove", p.name, "kc_donutcd", 1); } if (td > 0) { sc.ase("remove", p.name, "kc_tscd", 1); } if (s === 9 && !p.hasTag("stand_on") && kd === 0) { rc(`titleraw @s actionbar {\"rawtext\":[{\"text\":\"Stand on\"}]}`); } else if (s === 9 && p.hasTag("stand_on") && kd === 0) { rc(`titleraw @s actionbar {\"rawtext\":[{\"text\":\"Stand off\"}]}`); } if (s === 9 && !p.hasTag("stand_on") && kd > 0) { rc( `titleraw @s actionbar {\"rawtext\":[{\"text\":\"CD ${kdd.toFixed( 1 )}\"}]}` ); } else if (s === 9 && p.hasTag("stand_on") && kd > 0) { rc( `titleraw @s actionbar {\"rawtext\":[{\"text\":\"CD ${kdd.toFixed( 1 )}\"}]}` ); } if (p.hasTag("stand_on")) { if (s === 1 && ac === 0) { rc(`titleraw @s actionbar {\"rawtext\":[{\"text\":\"Attack\"}]}`); } else if (s === 2 && cd === 0) { rc(`titleraw @s actionbar {\"rawtext\":[{\"text\":\"Chop\"}]}`); } else if (s === 3 && dc === 0) { rc(`titleraw @s actionbar {\"rawtext\":[{\"text\":\"Donut\"}]}`); } else if (s === 4 && td === 0 && ae === 0) { rc( `titleraw @s actionbar {\"rawtext\":[{\"text\":\"Time skip\"}]}` ); } else if (s === 1 && ac > 0) { rc( `titleraw @s actionbar {\"rawtext\":[{\"text\":\"CD: ${acd.toFixed( 1 )}\"}]}` ); } else if (s === 2 && cd > 0) { rc( `titleraw @s actionbar {\"rawtext\":[{\"text\":\"CD: ${cdd.toFixed( 1 )}\"}]}` ); } else if (s === 3 && dc > 0) { rc( `titleraw @s actionbar {\"rawtext\":[{\"text\":\"CD: ${dcd.toFixed( 1 )}\"}]}` ); } else if (s === 4 && td > 0) { rc( `titleraw @s actionbar {\"rawtext\":[{\"text\":\"CD: ${tdd.toFixed( 1 )}\"}]}` ); } } } } }); } function s() { w.events.tick.subscribe(() => { for (const p of w.getPlayers()) { let s = sc.gse(p.name, "hotbar_slot"); let cd = sc.gse(p.name, "kc_scd"); if (p.hasTag("kcuser") && !p.hasTag("skill")) { if ( s === 9 && p.isSneaking && !p.hasTag("stand_on") && p.hasTag("left") && cd === 0 ) { p.addTag("stand_on"); p.playSound("beacon.activate"); sc.ase("set", p.name, "kc_scd", 40); rc(`summon jjc:kc "kc ${p.name}"`); } else if ( s === 9 && p.isSneaking && p.hasTag("stand_on") && p.hasTag("left") && cd === 0 ) { p.removeTag("stand_on"); sc.ase("set", p.name, "kc_scd", 40); p.playSound("beacon.deactivate"); rc(`event entity @e[type=jjc:kc,name="kc ${p.name}"] jjc:despawn`); } } if (cd > 0) { sc.ase("remove", p.name, "kc_scd", 1); } if (!p.hasTag("stand_on")) { p.removeTag("skill"); } } }); } function a() { w.events.tick.subscribe(() => { for (const p of w.getPlayers()) { if (p.hasTag("kcuser") && p.hasTag("stand_on")) { let s = sc.gse(p.name, "hotbar_slot"); let a = sc.gse(p.name, "kc_atk"); let cd = sc.gse(p.name, "kc_atkcd"); if (s === 1 && p.hasTag("left") && a === 0 && cd === 0) { p.addTag("skill"); rc(`event entity @e[type=jjc:kc,name="kc ${p.name}"] jjc:atk`); sc.ase("set", p.name, "kc_atk", 1); } if (a === 12) { std("kc_atk", 4); } if (a > 14) { p.removeTag("skill"); sc.ase("set", p.name, "kc_atk", -1); sc.ase("set", p.name, "kc_atkcd", 10); } if (a > 0) { sc.ase("add", p.name, "kc_atk", 1); } } } }); } function c() { w.events.tick.subscribe(() => { for (const p of w.getPlayers()) { if (p.hasTag("kcuser") && p.hasTag("stand_on")) { let s = sc.gse(p.name, "hotbar_slot"); let ae = sc.gse(p.name, "kc_tsa"); let c = sc.gse(p.name, "kc_chop"); let cd = sc.gse(p.name, "kc_chopcd"); if (s === 2 && p.hasTag("left") && c === 0 && cd === 0 && ae === 0) { p.addTag("skill"); rc(`event entity @e[type=jjc:kc,name="kc ${p.name}"] jjc:chop`); sc.ase("set", p.name, "kc_chop", 1); } if (c === 12) { std("kc_chop", 12); } if (c > 14) { p.removeTag("skill"); sc.ase("set", p.name, "kc_chop", -1); sc.ase("set", p.name, "kc_chopcd", 50); } if (c > 0) { sc.ase("add", p.name, "kc_chop", 1); } } } }); } function d() { w.events.tick.subscribe(() => { for (const p of w.getPlayers()) { if (p.hasTag("kcuser") && p.hasTag("stand_on")) { let s = sc.gse(p.name, "hotbar_slot"); let ae = sc.gse(p.name, "kc_tsa"); let d = sc.gse(p.name, "kc_donut"); let cd = sc.gse(p.name, "kc_donutcd"); if (s === 3 && p.hasTag("left") && d === 0 && cd === 0 && ae === 0) { p.addTag("skill"); rc(`event entity @e[type=jjc:kc,name="kc ${p.name}"] jjc:donut`); sc.ase("set", p.name, "kc_donut", 1); } if (d === 12) { std("kc_donut", 18); } if (d > 14) { p.removeTag("skill"); sc.ase("set", p.name, "kc_donut", -1); sc.ase("set", p.name, "kc_donutcd", 100); } if (d > 0) { sc.ase("add", p.name, "kc_donut", 1); } } } }); } function ts() { w.events.tick.subscribe(() => { for (const p of w.getPlayers()) { var s = sc.gse(p.name, "hotbar_slot"); let ts = sc.gse(p.name, "kc_ts"); let ae = sc.gse(p.name, "kc_tsa"); let cd = sc.gse(p.name, "kc_tscd"); if ( s === 4 && p.hasTag("kcuser") && p.hasTag("stand_on") && p.hasTag("left") && ae === 0 && cd === 0 ) { sc.ase("set", p.name, "kc_ts", 1); sc.ase("set", p.name, "kc_tsa", 100); p.onScreenDisplay.setTitle(" "); } if (ae > 0) { sc.ase("remove", p.name, "kc_tsa", 1); p.onScreenDisplay.updateSubtitle("§4|||||"); } if (ae > 100) { p.onScreenDisplay.updateSubtitle("§a|||||"); } else if (ae > 80) { p.onScreenDisplay.updateSubtitle("§a||||§4|"); } else if (ae > 60) { p.onScreenDisplay.updateSubtitle("§a|||§4||"); } else if (ae > 40) { p.onScreenDisplay.updateSubtitle("§a||§4|||"); } else if (ae > 20) { p.onScreenDisplay.updateSubtitle("§a|§4||||"); } else if (ae === 1) { sc.ase("set", p.name, "kc_tscd", 120); } if (ae > 0 && p.hasTag("left")) { if (s === 2) { sc.ase("set", p.name, "kc_tsa", 0); p.addTag("skill"); rc(`event entity @e[type=jjc:kc,name="kc ${p.name}"] jjc:chop`); rc( `execute @e[type=!jjc:kc,r=4,tag=!skill] ~~~ tp @p[r=4,c=1] ^^^-1.8 facing ^^^10` ); sc.ase("set", p.name, "kc_chop", 1); sc.ase("set", p.name, "kc_tscd", 120); } else if (s === 3) { sc.ase("set", p.name, "kc_tsa", 0); p.addTag("skill"); rc(`event entity @e[type=jjc:kc,name="kc ${p.name}"] jjc:donut`); rc( `execute @e[type=!jjc:kc,r=4,tag=!skill] ~~~ tp @p[r=4,c=1] ^^^-1.8 facing ^^^10` ); sc.ase("set", p.name, "kc_donut", 1); sc.ase("set", p.name, "kc_tscd", 120); } } } }); } try { ts(); } catch (r) { console.warn(r); } try { s(); } catch (r) { console.warn(r); } try { std(); } catch (r) { console.warn(r); } try { sts(); } catch (r) { console.warn(r); } try { a(); } catch (r) { console.warn(r); } try { c(); } catch (r) { console.warn(r); } try { d(); } catch (r) { console.warn(r); } try { ab(); } catch (r) { console.warn(r); } try { fl(); } catch (r) { console.warn(r); }

/**
 * @author AilyNekoCh
 * @description This Addon was make by AilyNekoCh
 * @discordUsername !AizzokeN#5555
 * @license MIT
 */
